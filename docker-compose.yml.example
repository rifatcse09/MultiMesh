version: '3.8'
services:
  # API Gateway
  gateway:
    image: nginx:alpine
    container_name: api-gateway
    ports:
      - "80:80"
    volumes:
      - ./gateway/nginx.conf:/etc/nginx/nginx.conf
      - ./gateway/default.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      - service1
      - service2
      - service1-nginx
      - service2-nginx
    networks:
      - app-network
  
  service1:
    build:
      context: ./service1
      dockerfile: ./.docker/Dockerfile
    container_name: service1
    volumes:
      - ./service1:/var/www/app
    restart: always
    networks:
      - app-network
    environment:
      APP_ENV: local
      KAFKA_BROKERS: kafka:9092
    depends_on:
      kafka:
        condition: service_healthy
  service2:
    build:
      context: ./service2
      dockerfile: ./.docker/Dockerfile
    container_name: service2
    volumes:
      - ./service2:/var/www/app
    restart: always
    networks:
      - app-network
    environment:
      APP_ENV: local
      KAFKA_BROKERS: kafka:9092
    depends_on:
      kafka:
        condition: service_healthy
  service1-nginx:
    image: nginx:alpine
    container_name: service1-nginx
    volumes:
      - ./service1/.docker/nginx/nginx.conf:/etc/nginx/nginx.conf # app and api panel
      - ./service1/.docker/nginx/default.conf:/etc/nginx/conf.d/default.conf # app and api panel
      - ./.data/nginx/logs:/var/log/nginx
      - ./service1:/var/www/app
    depends_on:
      - service1
    networks:
      - app-network
    environment:
      X_SERVER_TYPE: app

  service2-nginx:
    image: nginx:alpine
    container_name: service2-nginx
    volumes:
      - ./service2/.docker/nginx/nginx.conf:/etc/nginx/nginx.conf # app and api panel
      - ./service2/.docker/nginx/default.conf:/etc/nginx/conf.d/default.conf # app and api panel
      - ./.data/nginx/logs:/var/log/nginx
      - ./service2:/var/www/app
      # - ./.data/certs/certbot/conf:/etc/letsencrypt # uncomment when production deploy
      # - ./.data/certs/certbot/www:/var/www/certbot # uncomment when production deploy
    depends_on:
      - service2
    networks:
      - app-network
    environment:
      X_SERVER_TYPE: app

  # Kafka (No ZooKeeper using KRaft mode)
  kafka:
    image: apache/kafka:3.7.0
    container_name: kafka
    ports:
      - "9092:9092" # client connections
      - "9093:9093" # controller
    environment:
      KAFKA_ENABLE_KRAFT: "yes"
      KAFKA_NODE_ID: "1"
      KAFKA_PROCESS_ROLES: "controller,broker"
      KAFKA_LISTENERS: "PLAINTEXT://:9092,CONTROLLER://:9093"
      KAFKA_ADVERTISED_LISTENERS: "PLAINTEXT://kafka:9092"
      KAFKA_CONTROLLER_LISTENER_NAMES: "CONTROLLER"
      KAFKA_CONTROLLER_QUORUM_VOTERS: "1@kafka:9093"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: "PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT"
      KAFKA_INTER_BROKER_LISTENER_NAME: "PLAINTEXT"
      KAFKA_LOG_DIRS: "/tmp/kraft-logs"
    volumes:
      - ./kafka-data:/tmp/kraft-logs
      - ./.docker/scripts/docker-entrypoint-init.sh:/docker-entrypoint-init.d/init.sh
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "/opt/kafka/bin/kafka-topics.sh --bootstrap-server kafka:9092 --list || exit 1"]
      interval: 15s
      timeout: 10s
      retries: 6
      start_period: 60s

volumes:
  kafka-data: # Ensure this volume is properly defined
    driver: local
  pgdata:
  redis:
    driver: local

networks:
  app-network:
    driver: bridge